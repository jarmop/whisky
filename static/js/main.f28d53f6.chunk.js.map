{"version":3,"sources":["library.js","AlkoList.js","App.js","serviceWorker.js","index.js"],"names":["formatPrice","price","toFixed","AlkoList","products","className","map","product","key","id","name","relativePrice","abv","size","country","notes","defaultMinRelativePrice","highestRelativePrice","countryOptions","allProducts","reduce","accumulator","includes","push","App","state","selectedCountry","minRelativePrice","maxRelativePrice","this","setState","min","max","filter","sort","a","b","onChange","event","setSelectedCountry","target","value","type","defaultValue","setPriceRange","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2nyIAAO,SAASA,EAAYC,GAC1B,OAAOA,EAAMC,QAAQ,GCEvB,IA0DeC,EA1DA,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACX,2BAAOC,UAAU,SACf,+BACA,4BACE,oCAGA,uDAGA,mCAIA,qCAGA,oCAGA,uCAGA,uCAKF,+BACCD,EAASE,KAAI,SAAAC,GAAO,OACjB,wBAAIC,IAAKD,EAAQE,IACf,4BACGF,EAAQG,MAEX,4BACGV,EAAYO,EAAQI,eADvB,WAGA,4BACGJ,EAAQK,IADX,MAGA,4BACGZ,EAAYO,EAAQN,OADvB,WAGA,4BACGM,EAAQM,KADX,MAGA,4BACGN,EAAQO,SAEX,4BACGP,EAAQQ,cC/CjBC,EAA0B,GAC5BC,EAAuB,EACrBC,EAAiBC,EAAYC,QAC/B,SAACC,EAAad,GAOZ,OANIA,EAAQI,cAAgBM,IAC1BA,EAAuBjB,EAAYO,EAAQI,gBAExCU,EAAYC,SAASf,EAAQO,UAChCO,EAAYE,KAAKhB,EAAQO,SAEpBO,IAET,IA4EWG,E,YAxEb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,gBAAiB,YACjBC,iBAAkBX,EAClBY,iBAAkBX,GANR,E,gFAUKH,GACjBe,KAAKC,SAAS,CACZJ,gBAAiBZ,M,oCAIPiB,EAAKC,GACjBH,KAAKC,SAAS,CACZH,iBAAkBI,EAClBH,iBAAkBI,M,+BAIZ,IAAD,OACH5B,EAAWe,EAAYc,QAAO,SAAA1B,GAAO,OACvCA,EAAQO,UAAY,EAAKW,MAAMC,iBAAmBnB,EAAQI,cAAgB,EAAKc,MAAME,kBAAoBpB,EAAQI,cAAgB,EAAKc,MAAMG,oBAU9I,OARAxB,EAAS8B,MAAK,SAACC,EAAGC,GAChB,OAAID,EAAErB,UAAYsB,EAAEtB,QACXqB,EAAExB,cAAgByB,EAAEzB,cAEpB,KAKP,6BACE,yBAAKN,UAAU,oBACb,4BAAQgC,SAAU,SAACC,GAAD,OAAW,EAAKC,mBAC9BD,EAAME,OAAOC,QAAQA,MAAOZ,KAAKJ,MAAMC,iBACxCR,EAAeZ,KAAI,SAAAQ,GAAO,OACvB,4BAAQN,IAAKM,EAAS2B,MAAO3B,GAAUA,OAG7C,yBAAKT,UAAU,UACb,gDACA,2BACIA,UAAU,kBACVK,KAAK,WACLgC,KAAK,SACLC,aAAcd,KAAKJ,MAAME,iBACzBU,SAAU,SAAAC,GAAK,OAAI,EAAKM,cAAcN,EAAME,OAAOC,MAAO,EAAKhB,MAAMG,qBAExE,MACD,2BACIvB,UAAU,kBACVK,KAAK,WACLgC,KAAK,SACLC,aAAcd,KAAKJ,MAAMG,iBACzBS,SAAU,SAAAC,GAAK,OAAI,EAAKM,cAAc,EAAKnB,MAAME,iBAAkBW,EAAME,OAAOC,YAKvF,eAAiBrC,EAASyC,OAE3B,kBAAC,EAAD,CAAUzC,SAAUA,S,GAnEZ0C,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f28d53f6.chunk.js","sourcesContent":["export function formatPrice(price) {\n  return price.toFixed(2);\n}","import React from 'react';\nimport {formatPrice} from './library';\n\nlet AlkoList = ({products}) => (\n    <table className=\"table\">\n      <thead>\n      <tr>\n        <th>\n          Name\n        </th>\n        <th>\n          Price per 0.7 l of 40 %\n        </th>\n        <th>\n          Abv\n\n        </th>\n        <th>\n          Price\n        </th>\n        <th>\n          Size\n        </th>\n        <th>\n          Country\n        </th>\n        <th>\n          Notes\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      {products.map(product =>\n          <tr key={product.id}>\n            <td>\n              {product.name}\n            </td>\n            <td>\n              {formatPrice(product.relativePrice)} €\n            </td>\n            <td>\n              {product.abv} %\n            </td>\n            <td>\n              {formatPrice(product.price)} €\n            </td>\n            <td>\n              {product.size} l\n            </td>\n            <td>\n              {product.country}\n            </td>\n            <td>\n              {product.notes}\n            </td>\n          </tr>\n      )}\n      </tbody>\n    </table>\n);\n\nexport default AlkoList;","import React from 'react';\nimport './App.css';\nimport allProducts from './data/alko';\nimport AlkoList from './AlkoList';\nimport {formatPrice} from './library';\n\nconst defaultMinRelativePrice = 40;\nlet highestRelativePrice = 0;\nconst countryOptions = allProducts.reduce(\n    (accumulator, product) => {\n      if (product.relativePrice > highestRelativePrice) {\n        highestRelativePrice = formatPrice(product.relativePrice);\n      }\n      if (!accumulator.includes(product.country)) {\n        accumulator.push(product.country);\n      }\n      return accumulator;\n    },\n    []\n);\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      selectedCountry: 'Skotlanti',\n      minRelativePrice: defaultMinRelativePrice,\n      maxRelativePrice: highestRelativePrice,\n    };\n  }\n\n  setSelectedCountry(country) {\n    this.setState({\n      selectedCountry: country,\n    });\n  }\n\n  setPriceRange(min, max) {\n    this.setState({\n      minRelativePrice: min,\n      maxRelativePrice: max,\n    });\n  }\n\n  render() {\n    let products = allProducts.filter(product =>\n      product.country === this.state.selectedCountry && product.relativePrice > this.state.minRelativePrice && product.relativePrice < this.state.maxRelativePrice\n    );\n    products.sort((a, b) => {\n      if (a.country === b.country) {\n        return a.relativePrice - b.relativePrice;\n      } else {\n        return 0;\n      }\n    });\n\n    return (\n        <div>\n          <div className=\"filter-container\">\n            <select onChange={(event) => this.setSelectedCountry(\n                event.target.value)} value={this.state.selectedCountry}>\n              {countryOptions.map(country =>\n                  <option key={country} value={country}>{country}</option>\n              )}\n            </select>\n            <div className=\"filter\">\n              <label>price range: </label>\n              <input\n                  className=\"priceRangeInput\"\n                  name=\"minprice\"\n                  type=\"number\"\n                  defaultValue={this.state.minRelativePrice}\n                  onChange={event => this.setPriceRange(event.target.value, this.state.maxRelativePrice)}\n              />\n              {' - '}\n              <input\n                  className=\"priceRangeInput\"\n                  name=\"maxprice\"\n                  type=\"number\"\n                  defaultValue={this.state.maxRelativePrice}\n                  onChange={event => this.setPriceRange(this.state.minRelativePrice, event.target.value)}\n              />\n            </div>\n          </div>\n\n          {' tuotteita: ' + products.length}\n\n          <AlkoList products={products}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}